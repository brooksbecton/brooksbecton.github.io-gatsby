webpackJsonp([0xfa9e093eb7ac],{519:function(n,a){n.exports={data:{site:{siteMetadata:{title:"Brooks Becton's personal web site",author:"Brooks Becton"}},markdownRemark:{id:"/home/yaboibrooks/Code/websites/blog/src/pages/Async-JavaScript/index.md absPath of file >>> MarkdownRemark",html:'<p>JavaScript has had a few iterations of ways to handle asynchronous code. It can be a little funky to understand what is going on if you are new to JavaScript. In this example, we will make a request to the <a href="https://swapi.co/">SWAPI</a> to get Luke Skywalker’s information and use callbacks to handle async. The code should say that is going to print a name, and then print the name.</p>\n<hr>\n<p><strong>Note</strong> Callbacks are not much used anymore because they have the potential to make code harder to read. If you need async JS, look into using <a href="https://developers.google.com/web/fundamentals/primers/promises">Promises</a> and if availible using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">async/await</a></p>\n<hr>\n<p>Here is a naive approach</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * Makes an AJAX request to the SWAPI and\n * returns Luke Skywalker\'s info\n * @returns {Object} luke - Various Info about Luke Skywalker\n */</span>\n<span class="token keyword">function</span> <span class="token function">getLuke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://swapi.co/api/people/1/\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>luke<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>luke<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/**\n * Prints the name of a Star Wars Character\n * @param {Object} person - A Star Wars character\n * @param {string} person.name - Name of the star wars character\n */</span>\n<span class="token keyword">function</span> <span class="token function">printName</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>person <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'No Person Supplied\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Printing Name\'</span><span class="token punctuation">)</span> <span class="token comment">// Printing Name</span>\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token function">getLuke</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// undefined</span>\n<span class="token function">printName</span><span class="token punctuation">(</span>luke<span class="token punctuation">)</span> <span class="token comment">// No Person Supplied</span></code></pre>\n      </div>\n<p><a href="https://codepen.io/brooksbecton/pen/QQmmoe?editors=0012">CodePen</a></p>\n<p>This may look like it will work, but remember that JavaScript is always synchronous. This is easy for me to remember if I think about JS always going “straight down.” It say’s its about to print the name, calls the function, <em>doesn’t wait for the request to finish</em>, tries to prints Luke’s name. After the print the api returns the data, but it is already too late.~</p>\n<h2><a href="#callbacks">Callbacks</a></h2>\n<p>Callbacks are a way to pass a function into another function as a parameter and then running that “callback” after then async code has finished. With this example, we pass the print function in as a callback, so that when the data is back from the API, the data will get passed into the print function.</p>\n<div class="gatsby-highlight">\n      <pre class="language-js"><code class="language-js"><span class="token comment">/**\n * Makes an AJAX request to the SWAPI and\n * returns Luke Skywalkers info\n * @param {Function} cb - The function to be called\n *                        after the return of the jedi\n */</span>\n<span class="token keyword">function</span> <span class="token function">getLuke</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">\'https://swapi.co/api/people/1/\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=></span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">cb</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// ...</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'Printing Name\'</span><span class="token punctuation">)</span> <span class="token comment">// Printing Name</span>\n<span class="token function">getLuke</span><span class="token punctuation">(</span>printName<span class="token punctuation">)</span> <span class="token comment">// Luke Skywalker</span></code></pre>\n      </div>\n<p><a href="https://codepen.io/brooksbecton/pen/GQxxaX?editors=0012">CodePen</a></p>\n<p>We can pass functions as parameters in JS because in functions are <a href="https://en.wikipedia.org/wiki/First-class_citizen">First Class Citizens</a>. Notice that we run <code class="language-text">getLuke(printName)</code> which passes the function in without running it, instead of <code class="language-text">getLuke(printName())</code> which runs printName then hands printName’s return value, <em>undefined</em>, to getLuke as a parameter</p>\n<img class="lazy" data-src="https://media.giphy.com/media/9K2nFglCAQClO/giphy.gif"  style="display:block;margin: auto; width:75%" sizes="(min-width: 100%)"/>\n<p>This works for this lunchbox example, but in reality this can get out of hand quickly if you have to make a few sequential requests which leads to <a href="http://callbackhell.com/">Callback Hell</a>. It is much better to use Promises which we will get to next.</p>\n<h2><a href="#challenge">Challenge</a></h2>\n<p>It’s important to understand what Callback Hell can look or feel like.\nTry this out.</p>\n<ol>\n<li>Find all the females from the films Luke was in</li>\n<li>Find the planets they are from</li>\n<li>Finally, list the males from those planets</li>\n</ol>\n<p><a href="https://codepen.io/brooksbecton/pen/eVMrpB?editors=0012">Solution*</a></p>\n<p>*<em>Try to do it yourself before checking the solution</em></p>',frontmatter:{title:"Async Javascript - Return of the Callbacks!",date:"February 05, 2018"}}},pathContext:{slug:"/Async-JavaScript/",previous:{fields:{slug:"/Wednesday Bot/"},frontmatter:{title:"It is Wednesday My Dudes"}},next:{fields:{slug:"/SWAPI_Graph/"},frontmatter:{title:"SWAPI Graph"}}}}}});
//# sourceMappingURL=path---async-java-script-2cb2b7e7f04e9615da95.js.map